#!/bin/bash
# wallpaper shuffler and image-resizer script
#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
# by tassaron on march 5 2017
# updated 2017-05-04, 2018-09-21
#
#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#

# EDIT THESE TO YOUR FILEPATHS
WALLPAPER_DIR="${HOME}/Images/Wallpapers"
WATERMARK_IMG="${HOME}/Images/muffin/muffin-watermark.png"


check_for() {
    which "$1" &> /dev/null
    if [ "$?" -ne 0 ]; then
        echo "You need to install $1"
        exit 1
    fi
}
check_for hsetroot
check_for display
SAVE_FILE="/tmp/zrnd_bg-lastusedwallpaper"
if ! [ -f "$SAVE_FILE" ]; then
    touch "$SAVE_FILE"
fi
if ! [ -d "$WALLPAPER_DIR" ]; then
    echo "Edit ${0} to contain a valid path to a Wallpapers directory."
    exit 1
fi

# OPTIONS - change these to set default behaviour
SLEEP_TIME=x
RESOLUTION=1366x768
VERBOSE=0
WATERMARK=0

# FUNCTIONS
create_resized_img() {
    # create image with correct dimensions respecting aspect ratio, then cropped to size
    if [ "$VERBOSE" = 1 ]; then echo "creating resized image for $(basename $new_img)..."; fi
    convert -gravity center -resize $RESOLUTION^ -crop $RESOLUTION+0+0 $1 $2
}

create_watermark_img() {
    if ! [ -f "$WATERMARK_IMG" ]; then
        echo "Watermark image is not accessible. Edit the constant in rnd-bg to fix this."
        exit 1
    fi
    if [ ! -e "${WALLPAPER_DIR}/resized/${new_img}" ]; then
        create_resized_img "${WALLPAPER_DIR}/${new_img}" "${WALLPAPER_DIR}/resized/${new_img}"
    fi
    # add watermark to southeast corner and convert to jpg
    if [ "$VERBOSE" = 1 ]; then echo "creating watermark image for $new_img..."; fi
    composite -quality 90 -gravity SouthEast "$WATERMARK_IMG" "${WALLPAPER_DIR}/resized/${new_img}" "${WALLPAPER_DIR}/watermark/${new_img}-watermark.jpg"
}

set_new_bg () {
    # get old rnd img from the file
    rnd_img=$(cat $SAVE_FILE)
    # generate new images til one is not the previous one
    new_img="$rnd_img"
    while [ "$new_img" = "$rnd_img" ]; do
        new_img="$(find ${WALLPAPER_DIR} -maxdepth 1 -type f | shuf -n 1)"
    done
    # save this image to the file
    echo "$new_img" > "$SAVE_FILE"

    if [ "$WATERMARK" = 1 ]; then
        new_img=$(basename "$new_img")
        # first create watermark image if it does not exist
        if [ ! -e "${WALLPAPER_DIR}/watermark/${new_img}-watermark.jpg" ]; then
            create_watermark_img
        fi
        # set background with watermark
        hsetroot -center "${WALLPAPER_DIR}/watermark/${new_img}-watermark.jpg"
    else
        # set background without watermark
        if [ ! -e "${WALLPAPER_DIR}/resized/$(basename ${new_img})" ]; then
            create_resized_img "$new_img" "${WALLPAPER_DIR}/resized/$(basename ${new_img})"
        fi
        hsetroot -center "${WALLPAPER_DIR}/resized/$(basename ${new_img})"
        if [ "$?" -ne 0 ]; then
            echo 'Error encountered by hsetroot'
        fi
    fi
}

print_help () {
    echo "usage: rnd-bg [--help] [--kill] [--verbose] [--watermark] [--sleep] XmXs [--res] 1366x768"
}

# MAIN
# set options
active=1
getting_sleep=0
getting_res=0
for argument; do
    if [ "$getting_sleep" = 1 ]; then SLEEP_TIME="$argument"; getting_sleep=0; continue; fi
    if [ "$getting_res" = 1 ]; then RESOLUTION="$argument"; getting_res=0; continue; fi
    if [ "$argument" = "-h" ] || [ "$argument" = "--help" ]; then print_help; active=0; break; fi
    if [ "$argument" = "-k" ] || [ "$argument" = "--kill" ]; then killall rnd-bg; fi
    if [ "$argument" = "-v" ] || [ "$argument" = "--verbose" ]; then VERBOSE=1; fi
    if [ "$argument" = "-w" ] || [ "$argument" = "--watermark" ]; then WATERMARK=1; fi
    if [ "$argument" = "-s" ] || [ "$argument" = "--sleep" ]; then getting_sleep=1; fi
    if [ "$argument" = "-r" ] || [ "$argument" = "--res" ]; then getting_res=1; fi
done
# create directories if they don't exist
if [ ! -d "${WALLPAPER_DIR}/watermark" ]; then
    mkdir "${WALLPAPER_DIR}/watermark"
fi
if [ ! -d "${WALLPAPER_DIR}/resized" ]; then
    mkdir "${WALLPAPER_DIR}/resized"
fi
# loop
while [ "$active" = 1 ]; do
    set_new_bg
    if [ "$SLEEP_TIME" = "x" ]; then break; fi
    sleep $SLEEP_TIME
done
